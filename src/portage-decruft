#!/usr/bin/env python

# portage-decruft - check /etc/portage for stupid stuff.

# Copyright: Emil Beinroth <emilbeinroth@gmx.net>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

__author__      = 'Emil Beinroth'
__email__       = 'emilbeinroth@gmx.net'
__version__     = '0.1.5-r4'
__productname__ = 'portage-decruft'
__description__ = 'Cleaning tool for /etc/portage/ configuration.'

import os, sys, getopt, fnmatch, string
from functools import reduce


try: # >= portage-2.2
    import portage
    from portage.const import INCREMENTALS, USER_CONFIG_PATH
    from portage import output
    from portage.util import Atom
    from portage.dep  import Atom as DepAtom
except: # <=portage-2.1.x
    from sys import stderr
    try:
        import portage
        from portage_const import INCREMENTALS, USER_CONFIG_PATH
        import output
    except Exception as e:
        stderr.write('!!! Unable to import portage modules: %s\n' % e)
        exit(1)

AVAILABLE_ISSUES = [
        "keywords.exists",
        "keywords.irrelevant",
        "keywords.not_installed",
        "keywords.redundant",

        "mask.exists",
        "mask.redundant",
        "mask.not_installed",

        "unmask.exists",
        "unmask.irrelevant",
        "unmask.not_installed",
        "unmask.redundant",

        "use.exists",
        "use.iuse",
        "use.not_installed",
        "use.redundant",

        "features.exists",
        "features.irrelevant",
        "features.not_installed",

        "cflags.exists",
        "cflags.irrelevant",
        "cflags.not_installed",

        "cxxflags.exists",
        "cxxflags.irrelevant",
        "cxxflags.not_installed",

        "ldflags.exists",
        "ldflags.irrelevant",
        "ldflags.not_installed",
]

ENABLED_ISSUES = set(AVAILABLE_ISSUES)

def disable_issues(seq):
    for x in seq:
        ENABLED_ISSUES.difference_update(fnmatch.filter(AVAILABLE_ISSUES, x))

def enable_issues(seq):
    for x in seq:
        ENABLED_ISSUES.update(fnmatch.filter(AVAILABLE_ISSUES, x))

# Parse option string from sys.argv
def parse_options():
    try:
        long_opts = [ "list-issues", "enable=", "disable=", "no-color",
                      "nocolor", "version", "help" ]
        options, args = getopt.gnu_getopt(sys.argv[1:], "le:d:hVC", long_opts)
    except getopt.GetoptError as e:
        sys.stderr.write('%s\n' % e)
        exit(1)

    for opt in options:
        if opt[0] in ('-l', '--list-issues'):
            print("\n".join(AVAILABLE_ISSUES))
            exit(0)
        elif opt[0] in ('-e', '--enable'):
            enable_issues(list(map(string.strip, opt[1].split(','))))
        elif opt[0] in ('-d', '--disable'):
            disable_issues(list(map(string.strip, opt[1].split(','))))
        elif opt[0] in ('-V', '--version'):
            print('portage-decruft-%s' % __version__)
            exit(0)
        elif opt[0] in ('-C', '--no-color', '--nocolor'):
            #import output
            output.nocolor()
        elif opt[0] in ('-h', '--help'):
            print_help()
    return (None, args)

def print_help():
    print("""portage-decruft [OPTIONS]

portage-decruft check /etc/portage for any redundant, obsolete or irrelevant
entries.

  -l, --list-issues
                Show all available issues.
  -e, --enable LIST
                Enable the listed issues. Use ',' as separator. '*.exists' and
                'keywords.*' will work as expected.
  -d, --disable LIST
                Disable the listed issues. Use ',' as separator. '*.exists' and
                'keywords.*' will work as expected.
  -C, --no-color
                Do not colorize output.
  -h, --help
                Show this little text.
  -V, --version
                Show version string.


Please refer to http://stovokor.unfoog.de/portage-decruft/ for a more complete
documentation.

Distributed under the terms of the GNU General Public License v2
Send bug reports to Emil Beinroth <emil.beinroth@gmx.net>.""")

    exit(0)

def warn_installed_out_of_date(cpv):
    if cpv in warn_installed_out_of_date._warned_for: return
    warn_installed_out_of_date._warned_for.add(cpv)
    sys.stderr.write("""
!! Installed version %s is not available through portage, update or add the
!! ebuild to an overlay.

""" % red(cpv))
warn_installed_out_of_date._warned_for = set()

def color(wrappee):
    mod = output #__import__('output')
    def fun(s, sep=', '):
        if isinstance(s, (tuple, list, set)):
            return sep.join(map(fun, s))
        return getattr(mod, wrappee)(s)
    return fun

red      = color("red")
yellow   = color("yellow")
blue     = color("blue")
white    = color("white")

def report(issue, where, atom, text, *args):
    if issue not in ENABLED_ISSUES: return
    if report._last_file != where[0]:
        if report._last_file != None:
            print() # print newline so we have a little bit of formating
        report._last_file = where[0]
        print(".. in file %s" % yellow(where[0]))
    print("     line %03s: %s %s [%s]" % (where[1],
            red(atom), text % args, white(issue)))
report._last_file = None

## common utils ##

def in_all(seq, thing):
    return reduce(lambda carry, val: carry and thing in val, seq, True)

def in_any(seq, thing):
    for val in seq:
        if thing in val:
            return True
    return False

def seq_lstrip(seq, thing=None):
    return [i.lstrip(thing) for i in seq]

## configuration parsing ##

def read_config(name):
    if os.path.isdir(name):
        for e in os.listdir(name):
            if e[0] == '.':
                continue
            for k in read_config(os.path.join(name, e)):
                yield k
    elif os.path.isfile(name):
        skip_line = skip_block = False
        wait_for_not_empty = False
        with open(name) as f:
            for i, line in enumerate(f):
                line = line.strip()
                if not line:
                    if not wait_for_not_empty:
                        skip_block = False
                    continue
                elif line[0] == '#':
                    if 'DECRUFT:SKIP_ENTRY' in line:
                        skip_line = wait_for_not_empty = True
                    if 'DECRUFT:SKIP_BLOCK' in line:
                        skip_block = wait_for_not_empty = True
                    continue
                wait_for_not_empty = False
                seq = line.split(None, 1)
                if not portage.isvalidatom(seq[0]): continue
                if len(seq) == 1: seq.append("")
                yield skip_block or skip_line, seq, (name, i+1)
                if skip_line: skip_line = False

## portage utils ##

def match_all(cpv):
    return portdb.xmatch('match-all', cpv)

def match_visible(cpv):
    return portdb.xmatch('match-visible', cpv)

def pkgcmp(s1, s2):
    return portage.pkgcmp(portage.pkgsplit(s1), portage.pkgsplit(s2))

def masked_why(cpv):
    return portage.getmaskingstatus(cpv, settings=settings)


## evil hacks ##

def do_unmask(atom):
    mycatpkg=portage.dep_getkey(atom)
    settings.punmaskdict.setdefault(mycatpkg, []).append(atom)

def do_mask(atom):
    mycatpkg=portage.dep_getkey(atom)
    settings.pmaskdict.setdefault(mycatpkg, []).append(atom)

def do_keywords(key, value):
    value = value.split()
    # default to ~arch if no specific keyword is given
    if not value:
        mykeywordlist = []
        if settings.configdict["defaults"] \
                and "ACCEPT_KEYWORDS" in settings.configdict["defaults"]:
            groups = settings.configdict["defaults"]["ACCEPT_KEYWORDS"].split()
        else:
            groups = []
        for keyword in groups:
            if not keyword[0] in "~-":
                mykeywordlist.append("~"+keyword)
        value = mykeywordlist
    cp = portage.dep_getkey(key)
    settings._keywords_manager.pkeywordsdict.setdefault(cp, {})[DepAtom(key)] = value

# has_redundancy(..) -> overall_redundant, redundant_tokens
def has_redundancy(old_set, change_set, resolve=True):
    redundant_set = set()
    working_set = set(old_set)
    for flag in change_set:
        if flag[0] == '-':
            if flag[1:] == '*':
                working_set = set()
            elif flag[1:] not in working_set:
                redundant_set.add(flag)
            else: working_set.discard(flag[1:])
        else:
            if flag.lstrip('+') in working_set:
                redundant_set.add(flag)
            else: working_set.add(flag.lstrip('+'))
    return set(old_set) == working_set, redundant_set

## actual program ##

if __name__ == '__main__':
    parse_options()

    settings = portage.config(local_config=False,
            config_incrementals=INCREMENTALS)
    trees = portage.create_trees()
    trees[portage.root]["porttree"].settings = settings
    portdb = trees[portage.root]["porttree"].dbapi
    portdb.settings = settings
    vardb = trees[portage.root]["vartree"].dbapi
    vardb.settings = settings



    KEYWORDS_FILE = os.path.join(settings["PORTAGE_CONFIGROOT"], USER_CONFIG_PATH, "package.keywords")
    USE_FILE = os.path.join(settings["PORTAGE_CONFIGROOT"], USER_CONFIG_PATH, "package.use")
    MASK_FILE = os.path.join(settings["PORTAGE_CONFIGROOT"], USER_CONFIG_PATH, "package.mask")
    UNMASK_FILE = os.path.join(settings["PORTAGE_CONFIGROOT"], USER_CONFIG_PATH, "package.unmask")

    ## read package.keywords ##
    for skip, (atom, kws), where in read_config(KEYWORDS_FILE):
        if skip:
            do_keywords(atom, kws)
            continue

        all_cpv = match_all(atom)
        if not all_cpv:
            report('keywords.exists', where, atom, "does not exist")
            continue

        # reaons: keywords.not_installed
        pkg = portage.dep_getkey(atom)
        installed = vardb.match(pkg)
        if not installed:
            report('keywords.not_installed', where, atom, "is not installed")
            continue

        pre_visible = match_visible(atom)
        pre_reasons = [(cpv, masked_why(cpv)) for cpv in set(all_cpv) - set(pre_visible)]

        do_keywords(atom, kws)

        post_visible = match_visible(atom)
        post_reasons = [(cpv, masked_why(cpv)) for cpv in set(all_cpv) - set(post_visible)]

        # reaons: redundant
        if pre_visible == post_visible:
            report('keywords.redundant', where, atom, 'has no effect')
            continue

        # reaons: irrelevant
        if pkgcmp(installed[0], all_cpv[-1]) > 0:
            report('keywords.irrelevant', where, atom, 'only changes irrelevant versions')
            continue



    ## read package.use ##
    for skip, (atom, use), where in read_config(USE_FILE):
        if skip: continue

        matches = match_all(atom)
        if not matches:
            report('use.exists', where, atom, "does not exist")
            continue

        installed = vardb.match(atom)
        if not installed:
            report('use.not_installed', where, atom, "is not installed")
            continue

        use = use.split()
        use_not_in_iuse = set(seq_lstrip(use, '+-'))
        # There may be a '-*' present, remove it.
        use_not_in_iuse.discard('*')
        for cpv in installed:
            try: iuse = seq_lstrip(portdb.aux_get(cpv, ["IUSE"])[0].split(), '+-')
            except KeyError as e:
                # Installed version that is no longer available through
                # portage. I will not start guessing.
                warn_installed_out_of_date(cpv)
                use_not_in_iuse = set()
            use_not_in_iuse.difference_update(iuse)
        if use_not_in_iuse:
            report('use.iuse', where, atom,
                    "%s flag(s) are not supported (IUSE)", blue(use_not_in_iuse))
            continue

        redundancy_list = []
        for cpv in installed:
            try:
                settings.setcpv(cpv, mydb=portdb)
            except KeyError as e:
                # Installed version that is no longer available through
                # portage. I will not start guessing.
                warn_installed_out_of_date(cpv)
                redundancy_list = [(False, set())]
                break
            redundancy_list.append(has_redundancy(settings['USE'].split(), use))

        redundancy_list = list(zip(*redundancy_list))
        # Check if the changes were redundant for all installed cpv.
        all_redundant = reduce(bool.__and__, redundancy_list[0])
        # Take the set of flags that was redundant for all installed cpv.
        redundant_use = reduce(set.intersection, redundancy_list[1])

        if all_redundant:
            report('use.redundant', where, atom, "no change in useflags")
            settings.reset()
            continue
        elif redundant_use:
            report('use.redundant', where, atom, "%s flag(s) are redundant",
                    blue(redundant_use))
            settings.reset()
            continue
        settings.reset()


    ## read package.mask ##
    for skip, (atom, ignore), where in read_config(MASK_FILE):
        if skip:
            do_mask(atom)
            continue

        matches = match_all(atom)
        if not matches:
            report('mask.exists', where, atom, "does not exist")
            continue

        pkg = portage.dep_getkey(atom)
        if pkg != atom and not vardb.match(pkg):
            report('mask.not_installed', where, atom, "not installed")
            continue

        if in_all(list(map(masked_why, matches)), "package.mask"):
            report('mask.redundant', where, atom, "already 'masked by package.mask'")
            continue

        do_mask(atom)

    ## read package.unmask ##
    for skip, (atom, ignore), where in read_config(UNMASK_FILE):
        if skip:
            do_unmask(atom)
            continue

        matches = match_all(atom)
        if not matches:
            report('unmask.exists', where, atom, "does not exist")
            continue

        installed = vardb.match(atom)
        if not installed:
            report('unmask.not_installed', where, atom, "not installed")
            continue

        reasons = list(map(masked_why, matches))
        if not in_any(reasons, "package.mask"):
            report('unmask.redundant', where, atom, "not 'masked by package.mask'")
            continue

        if pkgcmp(installed[0], matches[-1]) > 0:
            report('unmask.irrelevant', where, atom, 'only changes irrelevant versions')
            continue

        do_unmask(atom)


    def check_simple_file(group, path):
        for skip, (atom, ignore), where in read_config(os.path.join(settings["PORTAGE_CONFIGROOT"], USER_CONFIG_PATH, path)):
            if skip: continue
            matches = match_all(atom)
            if not matches:
                report('%s.exists' % group, where, atom, "does not exist")
                continue

            installed = vardb.match(atom)
            if not installed:
                report('%s.not_installed' % group, where, atom, "not installed")
                continue

            if pkgcmp(installed[0], matches[-1]) > 0:
                report('%s.irrelevant' % group, where, atom, 'only changes irrelevant versions')
                continue

    check_simple_file('cflags', 'package.cflags')
    check_simple_file('cxxflags', 'package.cxxflags')
    check_simple_file('ldflags', 'package.ldflags')
    check_simple_file('features', 'package.features')

# vim:set sw=4 et ts=8:
